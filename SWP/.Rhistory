print("hello world")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library("nlme", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:nlme", unload=TRUE)
library("nlme", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:nlme", unload=TRUE)
library("nnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:nnet", unload=TRUE)
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:class", unload=TRUE)
print(s)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
q()
update.packages()
library (ISwr)
plot(rnorm(1000))
rnorm
rnorm
plot(rnorm(1000))
plot(rnorm(1000))
plot(rnorm(1000))
plot(rnorm(1000), pch=2)
plot(rnorm(1000), pch=2)
plot(rnorm(1000), pch=2)
plot(rnorm(10), pch=2)
lines(0)
lines(0,5)
2+2
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R')
source('~/Test1.R', echo=TRUE)
printHello
printHello()
printHello()
printHello()
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
hist(rnorm(120, 120, 12))
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
source('~/Test1.R', echo=TRUE)
?deviation
??deviation
??'standard deviation'
sd(randDistr)
source('~/Test1.R', echo=TRUE)
randDistr
source('~/Test1.R', echo=TRUE)
randDistr2= rnorm(120, 10, 2)
c = cbind(randDistr,randDistr2)
dim(c)
c
remove(c)
remove()
remove(randDistr, randDistr2)
b = 4,5
b = 4.5
a = 3
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R', echo=TRUE)
class(a)
class("a")
is.character(b)
a^2 + 1/b
sqrt(a*b)
log(base = 2 ,x = a)
?matrix
mat1 = (data = 1:10, nrow = 3, byrow = TRUE)
mat1 = matrix(data = 1:10, nrow = 3, byrow = TRUE)
remove(mat1)
mat1 = matrix(data = c(1:8, 10), nrow = 3, byrow = TRUE)
mat1
mat2 = matrix(data = 1:9, nrow = 3, byrow = FALSE)
mat2
mat3 = matrix(data = 1:3, nrow = 3, byrow = FALSE)
mat3
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
remove(mat1, mat2, mat3)
A = matrix(data = c(1:8, 10), nrow = 3, byrow = TRUE)
B = matrix(data = 1:9, nrow = 3, byrow = FALSE)
y = matrix(data = 1:3, nrow = 3, byrow = FALSE)
a*B
# A∗B
A*B
invA = t(A)
invA
remove(invA)
??inverse
A*B
A
b
B
a*B
A*y
?inverse
?>inverse
??inverse
A*B
inverse(A)
invA = invers(A)
invA = inverse(A)
invA = inverse.rle(A)
invA = solve(A)
invA
remove(invA)
invA = ginv(A)
library(MASS)
invA = ginv(A)
invA
a*B
a*A
A*B
A%*%B
invA = solve(A)
invA
invA = inv(A)
library(matlib)
install.packages("matlib")
invA = inv(A)
library(matlib)
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
library(matlib)
install.packages("matlib")
install.packages(c("callr", "cli", "data.table", "digest", "dplyr", "evaluate", "fansi", "htmlwidgets", "ipred", "IRdisplay", "kernlab", "later", "lava", "magic", "MASS", "mime", "ModelMetrics", "mongolite", "odbc", "pkgconfig", "pls", "processx", "R6", "Rcpp", "reprex", "rlang", "robustbase", "rstudioapi", "scales", "sparklyr", "testthat", "tidyselect", "tinytex", "TTR", "xtable", "xts", "zoo"))
library(matlib)
install.packages("matlib")
getwd()
libPaths()
.libPaths()
.libPaths("/anaconda3/lib/R/library")
.libPaths()
install.packages("matlib")
wpd
wdp
wd
install.packages("matlib")
install.packages("matlib")
defaults write org.R-project.R force.LANG en_US.UTF-8
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
source('~/OneDrive - hu-berlin.de/HU Berlin/Semester 1/Business Analytics & Data Science/Week1/HW.R')
library("matlib", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("matlab")
locale -a | grep en_US
library(matlib)
library("matlib", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("matlib")
library(matlib)
install.packages("MASS")
install.packages("matlibplot")
install.packages('matlib')
.libPaths()
library(matlib)
install.packages("matlib")
library(matlib)
library(matlib)
.path.package('matlib')
.libPaths()
library(matlib)
install.packages('matlib')
.libPaths()
library(matlib)
library(matlib)
library(matlib)
library(matlib)
install.packages("matliv")
install.packages("matlib")
install.packages("matlib")
install.packages("survival")
source('~/OneDrive - hu-berlin.de/Programming/R/OutofClass.R', echo=TRUE)
?plot
source('~/OneDrive - hu-berlin.de/Programming/R/OutofClass.R', echo=TRUE)
source('~/OneDrive - hu-berlin.de/Programming/R/OutofClass.R', echo=TRUE)
source('~/OneDrive - hu-berlin.de/Programming/R/OutofClass.R', echo=TRUE)
source('~/OneDrive - hu-berlin.de/Programming/R/OutofClass.R', echo=TRUE)
source('~/OneDrive - hu-berlin.de/Programming/R/OutofClass.R', echo=TRUE)
source('~/OneDrive - hu-berlin.de/Programming/R/OutofClass.R', echo=TRUE)
51.5*1.5
g = c(70.40820398,
84.42738219,
47.09880498,
78.19621803,
5.696900303,
24.57121466,
28.47048931,
77.75995684)
mean(g)
boxplot(g)
# 2. Calculate the values of the probability density function (with μ = 0 and σ = 1) at
# x = −3, −2.8, . . . , +3 and store the results in a variable nvValues
stDevValues = seq(from = -3, to = 3, by = 0.2)
# 3. Create a simple graph of the resulting values using the plot() function. Use the R
# help and Google (do it twice) to find out how to plot a line instead of dots and change
#the color to red.
plot(dnorm(stDevValues, mean = 0, sd = 1), type = 'l', col = 'red')
?plot
# 3. Create a simple graph of the resulting values using the plot() function. Use the R
# help and Google (do it twice) to find out how to plot a line instead of dots and change
#the color to red.
plot(dnorm(stDevValues, mean = 0, sd = 1), type = 'l', col = 'red', lwd = 2)
# 3. Create a simple graph of the resulting values using the plot() function. Use the R
# help and Google (do it twice) to find out how to plot a line instead of dots and change
#the color to red.
plot(dnorm(stDevValues, mean = 0, sd = 1), type = '1', col = 'red', lwd = 2)
# 3. Create a simple graph of the resulting values using the plot() function. Use the R
# help and Google (do it twice) to find out how to plot a line instead of dots and change
#the color to red.
plot(dnorm(stDevValues, mean = 0, sd = 1), type = 'l', col = 'red', lwd = 2)
install.packages("ISwR")
library("ISwR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:ISwR", unload=TRUE)
library("ISwR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
plot(rnorm(1000))
source('~/.active-rstudio-document', echo=TRUE)
plot(rnomr(1000), type ='l')
plot(rnorm(1000), type ='l')
store.df = read.csv("http://goo.gl/QPDM")
store.df = read.csv("http://goo.gl/QPDdml")
store.df = read.csv("http://goo.gl/QPDdMl")
store.df
summery(store.df)
summary(store.df)
boxplot(summary(store.df)()
boxplot(summary(store.df))
boxplot(summary(store.df$Year))
boxplot(summary(store.df$country))
install.packages('cars')
install.packages('CARS')
install.packages("rlang")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
carData
df = carDat
df = carData
df = cars
df
hist (df$speed)
hist (df$dist)
hist (store.df$p1sales)
hist (store.df$p1sales)
hist (store.df$p1salesm, main = 'Title 1 ', xlab = 'xlab', ylab = 'ylab')
hist (store.df$p1salesm, main = 'Title 1 ', xlab = 'xlab', ylab = 'ylab')
df = cars
hist (store.df$p1salesm, main = 'Title 1 ', xlab = 'xlab', ylab = 'ylab')
hist (store.df$p1salesm, break = 14)
hist (store.df$p1salesm, breaks = 14)
hist (store.df$p1salesm , breaks = 14)
hist (x =store.df$p1salesm , breaks = 14)
hist (store.df$p1salesm)
hist (store.df$storeNum)
hist (store.df$p1sales)
hist (store.df$p1sales, breaks = 40 )
hist (store.df$p1sales, breaks = 40, freq= FALSE )
hist (store.df$p1sales, breaks = 40, freq= FALSE )
hist (store.df$p1sales, breaks = 40, freq= FALSE, type = 'l' )
hist (store.df$p1sales, breaks = 40, freq= FALSE, type = 'l' )
boxplot(store.df$p1sales)
boxplot(store.df$p1sales, horizontal = TRUE)
install.packages(readxl)
install.packages('readxl')
install.packages("readxl")
library('readxl')
args(sd)
a <- c(2,3,4)
ls
ls()
rm(list=ls())
getwd()
git
install.packages("survival")
install.packages("gapminder")
library(gapminder)
gapminder
gapmindertb = as.data.table(gapminder)
library(data.table)
gapmindertb = as.data.table(gapminder)
gapmindertb
gapmindertb[year == 1952, .(lifeExp,pop)]
gapmindertb[year == 1952, .(country,lifeExp,pop)][order[lifeExp]]
gapmindertb
gapmindertb[year == 1952, .(country,lifeExp, pop)][order[lifeExp]]
gapmindertb[year == 1952, .(country,lifeExp, pop)][order[lifeExp]
a
gapmindertb[year == 1952, .(country,lifeExp, pop)][order[lifeExp]
1
gapmindertb[year == 1952, .(country,lifeExp, pop)][order(lifeExp)]
gapmindertb[year == 1952, .(country,lifeExp, pop)][order(-lifeExp)]
gapmindertb[country == "Norway", .(country,lifeExp, pop)][order(-lifeExp)]
gapmindertb[country == "Norway", .(country, year,lifeExp, pop)][order(-lifeExp)]
gapmindertb
ggplot(gepmindertb, aes(x = gdpPercap, y = lifeExp)) +geom_point()
library(ggplot2)
ggplot(gepmindertb, aes(x = gdpPercap, y = lifeExp)) +geom_point()
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp)) +geom_point()
ggplot(gapmindertb, aes(x = year, y = lifeExp)) +geom_point()
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp)) +geom_point()
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp)) +geom_point() + geom_smooth()
gapmindertb[gdpPercap > 50000, .(country, year,lifeExp, pop)][order(-lifeExp)]
gapmindertb[gdpPercap > 50000][order(-lifeExp)]
gapmindertb[gdpPercap > 5000][order(-lifeExp)]
gapmindertb[gdpPercap > 30000][order(-lifeExp)]
gapmindertb[gdpPercap > 30000][order(-gdpPercap)]
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp, col = continent)) +geom_point() + geom_smooth()
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp, col = continent)) +geom_point() + geom_smooth(se = F)
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp, col = continent)) +geom_point(alpha = 0.5) + geom_smooth(se = F)
gapmindertb[continent = "Europe"][order(-gdpPercap)]
gapmindertb[continent == "Europe"][order(-gdpPercap)]
gapmindertb[continent == "Europe"][order(gdpPercap)]
gapminder %>% filter(year == 2007 )
library(dypler)
library(dplyr)
gapminder %>% filter(year == 2007)
install.packages("tidyverse")
install.packages(c("lattice", "xts"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp, col = continent)) +
geom_point(alpha = 0.5) + geom_smooth(se = F)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp, col = continent)) +
geom_point(alpha = 0.5) + geom_smooth(se = F, method = lm) + scale_x_log10() + facet_wrap( ~ continent)
gapmindertb
ggplot(gapmindertb, aes(x = gdpPercap, y = lifeExp, col = continent, size = pop )) +
geom_point(alpha = 0.5) + geom_smooth(se = F, method = lm) + scale_x_log10() + facet_wrap( ~ continent)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = lifeExp, size = pop)) + geom_point() + scale_x_log10()+ facet_wrap(~ year)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point() + scale_x_log10()+ facet_wrap(~ year)+
geom_smooth()
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point() + scale_x_log10()+ facet_wrap(~ year)+
geom_smooth()
library(ggplot2)
library(dplyr)
diamonds
diamondsT10 = diamonds %>% top_n(n = 1000)
diamondsT10
summary(diamondsT10_
summary(diamondsT10)
summary(diamondsT10)
install.packages("3Dplot")
install.packages("plot3D")
library(plot3D)
scatter3D(diamondsT10$x, diamondsT10$y, diamondsT10$z)
scatter3D(diamondsT10$x, diamondsT10$y, diamondsT10$z, phi = 0, bty ="g")
diamondsT10
ggplot(diamondsT10, aes(x = price,y = carat, col = cut)) + geom_point()
ggplot(diamondsT10, aes(x = price,y = carat, col = cut)) + geom_point()+scale_x_log10()
ggplot(diamondsT10, aes(x = price, col = cut)) + geom_boxplot()
ggplot(diamondsT10, aes(x = price, col = cut)) + geom_histogram()
ggplot(diamondsT10, aes(x = price, fill = cut)) + geom_histogram()
ggplot(diamondsT10, ase(x=cut, y = price)) + geom_boxplot()
ggplot(diamondsT10, aes(x=cut, y = price)) + geom_boxplot()
ggplot(diamondsT10, aes(x=cut, y = price)) + geom_boxplot()+ facet_wrap(~ cut)
ggplot(diamondsT10, aes(y = price)) + geom_boxplot()+ facet_wrap(~ cut)
ggplot(diamondsT10, aes(x = price, fill = cut)) + geom_histogram()
ggplot(diamondsT10, aes(x = price, y= carat)) + geom_point() + facet_wrap(~ cut )
ggplot(diamondsT10, aes(x = price, y= carat)) + geom_point() +
facet_wrap(~ cut ) + geom_smooth()
setwd("/Users/Raviky/OneDrive - hu-berlin.de/Git/RWorks/CACI/SWP/")
library(data.table)
library(readxl)
library(data.table)
library(ggplot2)
library(psych)
getwd()
install.packages(data.table)
install.packages("data.table")
library(data.table)
library(readxl)
library(data.table)
library(ggplot2)
library(psych)
library(dyplr)
